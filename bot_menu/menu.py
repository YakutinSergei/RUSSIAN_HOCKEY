from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from lexicon.lexicon_ru import MENU, PAGE

'''–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é'''


async def main_menu():
    inline_markup: InlineKeyboardBuilder = InlineKeyboardBuilder()
    buttons: list[InlineKeyboardButton] = [InlineKeyboardButton(
        text='ü•Ö–ö–æ–º–∞–Ω–¥–∞',
        callback_data='commands'
    ), InlineKeyboardButton(
        text='üìà–†–µ–π—Ç–∏–Ω–≥',
        callback_data='rating'
    ), InlineKeyboardButton(
        text='üèí–ò–≥—Ä–æ–∫–∏',
        callback_data='players'
    ), InlineKeyboardButton(
        text='üèÜ–¢—É—Ä–Ω–∏—Ä—ã',
        callback_data='tournaments'
    ), InlineKeyboardButton(
        text='üé≤–°—Ç–∞–≤–∫–∏',
        callback_data='bet'
    ), InlineKeyboardButton(
        text='üè™–ú–∞–≥–∞–∑–∏–Ω',
        callback_data='shop'
    )
    ]

    inline_markup.row(*buttons, width=2)
    return inline_markup.as_markup()

'''–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ, –ø—Ä–µ—Ñ–∏–∫—Å, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫)'''
def create_inline_kb(width: int,
                     pref: str,
                     *args: str,
                     **kwargs: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=button,
                callback_data=pref + button))
    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(
                text=text,
                callback_data=pref + button))

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


'''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü'''
def create_pg_kb_command(pref: str, *buttons: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–ª–¥–µ—Ä —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb_builder.row(*[InlineKeyboardButton(
        text=PAGE[button] if button in PAGE else button,
        callback_data=f'{pref}_{button}') for button in buttons]).row(InlineKeyboardButton(text='‚úÖ–í—ã–±—Ä–∞—Ç—å', callback_data=f'choice_player'))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()

'''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤'''
def create_pg_kb_players(pref: str, price: str, *buttons: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–ª–¥–µ—Ä —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb_builder.row(*[InlineKeyboardButton(
        text=PAGE[button] if button in PAGE else button,
        callback_data=f'{pref}_{button}') for button in buttons]).\
        row(InlineKeyboardButton(text=f'{price}', callback_data=f'price_{price.split(":")[0]}_{pref.split("_")[2]}_{pref.split("_")[3]}')).\
        row(InlineKeyboardButton(text=PAGE['back'], callback_data=f'{pref}_players'))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


'''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –≤ –∫–æ–º–∞–Ω–¥—É'''
def create_pg_choice_players(pref: str, price: str, *buttons: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–ª–¥–µ—Ä —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb_builder.row(*[InlineKeyboardButton(
        text=PAGE[button] if button in PAGE else button,
        callback_data=f'{pref}_{button}') for button in buttons]).\
        row(InlineKeyboardButton(text=f'{price}', callback_data=f'{pref}_choice')).\
        row(InlineKeyboardButton(text=PAGE['back'], callback_data=f'{pref}_team'))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()

'''–û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É'''
btn_menu: KeyboardButton = KeyboardButton(text='‚öôÔ∏è–ú–ï–ù–Æ')
btn_game: KeyboardButton = KeyboardButton(text='üèíü•Ö–ò–ì–†–ê')
btn_command: KeyboardButton = KeyboardButton(text='ü•Ö–ö–æ–º–∞–Ω–¥–∞')
btn_bet: KeyboardButton = KeyboardButton(text='üé≤C—Ç–∞–≤–∫–∏')
btn_tournament: KeyboardButton = KeyboardButton(text='üèÜ–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä')
btn_players_add: KeyboardButton = KeyboardButton(text=MENU['add_player'])
menu_user_private: ReplyKeyboardMarkup = ReplyKeyboardMarkup(width=1, keyboard=[[btn_menu], [btn_game]],
                                                    resize_keyboard=True)
menu_admin: ReplyKeyboardMarkup = ReplyKeyboardMarkup(width=2, keyboard=[[btn_menu], [btn_game], [btn_bet],
                                                                         [btn_tournament], [btn_players_add]],
                                                    resize_keyboard=True)
menu_user: ReplyKeyboardMarkup = ReplyKeyboardMarkup(width=1, keyboard=[[btn_command],[btn_game]],
                                                    resize_keyboard=True)


'''–ú–µ–Ω—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã'''
def kb_team(pref: str, name_pos: str, *buttons: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–ª–¥–µ—Ä —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb_builder.row(InlineKeyboardButton(text=f'{name_pos}', callback_data=f'my_team_{name_pos}')).\
        row(*[InlineKeyboardButton(
        text=PAGE[button] if button in PAGE else button,
        callback_data=f'{pref}_{name_pos}_{button}') for button in buttons])
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()
